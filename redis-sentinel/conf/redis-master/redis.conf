#############################################################################
#                                  基础设置                                  #
#############################################################################

# 守护进程启动: docker方式需要以前台的方式启动
daemonize no
# pid
pidfile "/var/run/redis_6379.pid"
# redis 端口
port 6379
# 对外声明的ip
# slave-announce-ip 192.168.0.113
# 对外声明的端口
# slave-announce-port 6380
# 允许访问redis的ip
bind 0.0.0.0
# 关闭无消息的客户端间隔
timeout 0
# 对客户端发送ack信息 单位秒
tcp-keepalive 0
# 数据库数量
databases 8
# redis 工作目录
dir "/usr/local/redis/data"
# redis 允许同时最多链接数量
maxclients 65535
# 设置redis 的内存上限
maxmemory 512mb

#############################################################################
#                                  淘汰策略                                  #
#############################################################################

# volatile-random           只限于设置了expire的key，随机删除一部分key
# allkeys-random            所有key通用， 随机删除一部分key
# volatile-lru              只限于设置了expire的key，优先删除最近最少使用(less recently used, LRU)的key
# allkeys-lru               所有key通用，优先删除最近最少使用(less recently used, LRU)的key
# volatile-ttl              只限于设置了expire的key，优先删除剩余时间短(time to live,TTL)的key
# no-enviction              不删除任何key，达到最大内存限制时，在写操作时返回错误

maxmemory-policy volatile-lru

#############################################################################
#                                  日志设置                                  #
#############################################################################

# 日志输出的文件名
logfile "/var/log/redis/redis.log"

#############################################################################
#                                  密码设置                                  #
#############################################################################
# 设置连接密码
requirepass "123456"

#############################################################################
#                                 持久化设置                                  #
#############################################################################
# RDB 优点:
#   RDB是一个紧凑压缩的二进制文件，代表Redis在某个时间点上的数据快照。用于备份，全量复制，灾难恢复等场景。
# RDB 缺点:  
#   RDB无法做到实时持久化。因bgsave需fork子进程，属于重量级操作，频繁执行成本过高。不适合实时持久化。
# AOF 优点：
#   以日志的形式记录每次写命令， 重启时会重新执行AOF文件中的命令达到恢复数据的目的。可以实现实时持久化。
# AOF 缺点：
#   对于相同的数据集来说，AOF文件的体积通常要大于RDB文件的体积。
#   根据所使用的 fsync 策略，AOF的速度可能会慢于 RDB。在一般情况下，每秒fsync的性能依然非常高，
# AOF 重写：
#   redis 会对 AOF 文件进行重建，此时会生成一个新的AOF文件，这个文件包含重建当前数据及所需的最少命令。

# 60秒内至少有1000个改动，自动保存一次数据。
save 60 1000
appendonly yes
# appendfsync always、everysec、no
appendfsync everysec


#############################################################################
#                                  主从配置                                  #
#############################################################################
# master连接密码
masterauth "123456"

# 在从服务器的数量少于1个，或者三个从服务器的延迟（lag）值都大于或等于10秒时，主服务器将拒绝执行写命令
min-replicas-to-write 1
min-replicas-max-lag 10

# 配置master
# replicaof 10.10.20.101 6379
